dnl  Process this file with autoconf to produce a configure script.


dnl  Copyright 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.
dnl
dnl  This file is part of the GNU MP Library.
dnl
dnl  The GNU MP Library is free software; you can redistribute it and/or modify
dnl  it under the terms of the GNU Lesser General Public License as published
dnl  by the Free Software Foundation; either version 2.1 of the License, or (at
dnl  your option) any later version.
dnl
dnl  The GNU MP Library is distributed in the hope that it will be useful, but
dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
dnl  License for more details.
dnl
dnl  You should have received a copy of the GNU Lesser General Public License
dnl  along with the GNU MP Library; see the file COPYING.LIB.  If not, write to
dnl  the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
dnl  MA 02111-1307, USA.


AC_REVISION($Revision$)dnl
AC_PREREQ(2.14)dnl
AC_INIT(gmp-impl.h)

dnl Check system.
AC_CANONICAL_SYSTEM

dnl  Automake
AM_INIT_AUTOMAKE(gmp, GMP_VERSION)
AM_CONFIG_HEADER(config.h:config.in)
AM_MAINTAINER_MODE

dnl  GMP specific
GMP_INIT(config.m4)


AC_ARG_ENABLE(assert,
AC_HELP_STRING([--enable-assert],[enable ASSERT checking [default=no]]),
[case "${enableval}" in
yes|no) ;;
*) AC_MSG_ERROR([bad value ${enableval} for --enable-assert, need yes or no]) ;;
esac],
[enable_assert=no])

if test "$enable_assert" = "yes"; then
  AC_DEFINE(WANT_ASSERT,1,
  [./configure --enable-assert option, to enable some ASSERT()s])
fi


AC_ARG_ENABLE(alloca,
AC_HELP_STRING([--enable-alloca],[use alloca for temp space [default=yes]]),
[case "${enableval}" in
yes|no) ;;
*) AC_MSG_ERROR([bad value ${enableval} for --enable-alloca, need yes or no]) ;;
esac],
[enable_alloca=yes])

if test "$enable_alloca" = "no"; then
  AC_DEFINE(USE_STACK_ALLOC,1,
  [./configure --disable-alloca option, to use stack-alloc.c, not alloca])
fi


AC_ARG_ENABLE(fft,
AC_HELP_STRING([--enable-fft],[enable FFTs for multiplication [default=no]]),
[case "${enableval}" in
yes|no) ;;
*) AC_MSG_ERROR([bad value ${enableval} for --enable-fft, need yes or no]) ;;
esac],
[enable_fft=no])

if test "$enable_fft" = "yes"; then
  AC_DEFINE(WANT_FFT,1,
  [./configure --enable-fft option, to enable FFTs for multiplication])
fi


AC_ARG_ENABLE(mpbsd,
AC_HELP_STRING([--enable-mpbsd],[build Berkley MP compatibility library [default=no]]),
[case "${enableval}" in
yes|no) ;;
*) AC_MSG_ERROR([bad value ${enableval} for --enable-mpbsd, need yes or no]) ;;
esac],
[enable_mpbsd=no])
AM_CONDITIONAL(WANT_MPBSD, test "$enable_mpbsd" = "yes")


AC_ARG_ENABLE(mpfr,
AC_HELP_STRING([--enable-mpfr],[build MPFR [default=no]]),
[case "${enableval}" in
yes|no) ;;
*) AC_MSG_ERROR([bad value ${enableval} for --enable-mpfr, need yes or no]) ;;
esac],
[enable_mpfr=no])
AM_CONDITIONAL(WANT_MPFR, test "$enable_mpfr" = "yes")


AC_ARG_ENABLE(profiling,
AC_HELP_STRING([--enable-profiling],[build with profiler support [default=no]]),
[case "${enableval}" in
no|prof|gprof) ;;
*) AC_MSG_ERROR([bad value ${enableval} for --enable-profiling, need no/prof/gprof]) ;;
esac],
[enable_profiling=no])

GMP_DEFINE_RAW(["define(<WANT_PROFILING>,<\`$enable_profiling'>)"])

# -fomit-frame-pointer is incompatible with -pg, on x86s at least
if test "$enable_profiling" = gprof; then
  fomit_frame_pointer=
else
  fomit_frame_pointer="-fomit-frame-pointer"
fi


tmp=`echo $target_cpu | sed 's/\./_/'`
AC_DEFINE_UNQUOTED(HAVE_TARGET_CPU_$tmp)


dnl Switch on OS and determine what compiler to use.
dnl
dnl  check_64bit_compiler  Set to "yes" if we are to check 64-bit tools.
dnl  cclist		   List of compilers, best first.
dnl  gmp_cflags_{cc}	   Flags for compiler named {cc}.
dnl  gmp_cflags64_{cc}     Flags for compiler named {cc} for 64-bit code.
dnl  gmp_optcflags_{cc}	   Optional compiler flags.
dnl  gmp_xoptcflags_{cc}   Exclusive optional compiler flags.
dnl
check_64bit_compiler="no"
cclist="gcc cc"		# FIXME: Prefer c89 to cc.
gmp_cflags_gcc="-g -O2"
gmp_cflags64_gcc="-g -O2"
gmp_cflags_cc="-g"
gmp_cflags64_cc="-g"

case "$target" in
  # Alpha
  alpha*-cray-unicos*)
    # Don't perform any assembly syntax tests on this beast.
    gmp_no_asm_syntax_testing=yes
    cclist=cc
    gmp_cflags_cc="$gmp_cflags_cc -O"
    ;;
  alpha*-*-osf*)
    flavour=`echo $target_cpu | sed 's/^alpha//g'`
    if test -n "$flavour"; then
      case $flavour in	   # compilers don't seem to understand `ev67' and such.
	ev6? | ev7*) flavour=ev6;;
      esac
      gmp_optcflags_gcc="-mcpu=$flavour"
      # FIXME: We shouldn't fail fatally if none of these work, but that's
      # how xoptcflags work and we don't have any other mechanism right now.
      # It would be prettier to use a feature test for whether these assembly
      # flags are necessary.
      gmp_xoptcflags_gcc="-Wa,-arch,${flavour} -Wa,-m${flavour}"
      gmp_optcflags_cc="-arch $flavour -tune $flavour"
    fi
    ;;
  alpha*-*-*)
    cclist="gcc"
    flavour=`echo $target_cpu | sed 's/^alpha//g'`
    if test -n "$flavour"; then
      case $flavour in
	ev6? | ev7*) flavour=ev6;;
      esac
      gmp_optcflags_gcc="-mcpu=$flavour"
      # FIXME: We shouldn't fail fatally if none of these work, but that's
      # how xoptcflags work and we don't have any other mechanism right now.
      # It would be prettier to use a feature test for whether these assembly
      # flags are necessary.
      gmp_xoptcflags_gcc="-Wa,-arch,${flavour} -Wa,-m${flavour}"
    fi
    ;;
  # Cray vector machines.  This must come after alpha* so that we can
  # recognize present and future vector processors with a wildcard.
  *-cray-unicos*)
    # Don't perform any assembly syntax tests on this beast.
    gmp_no_asm_syntax_testing=yes
    cclist=cc
    # Don't inherit default gmp_cflags_cc value; it comes with -g which
    # disables all optimization on Cray vector systems
    gmp_cflags_cc="-O"
    ;;

  # AMD and Intel x86 configurations
  X86_PATTERN)
    # Rumour has it -O2 used to give worse register allocation than just -O.
    gmp_cflags_gcc="-g -O $fomit_frame_pointer"

    case "${target}" in
      i386*-*-*)    gmp_optcflags_gcc="-mcpu=i386 -march=i386";;
      i486*-*-*)    gmp_optcflags_gcc="-mcpu=i486 -march=i486";;
      i586*-*-* | pentium-*-* | pentiummmx-*-*)
                    gmp_optcflags_gcc="-mcpu=pentium -march=pentium";;
      k6*-*-*)      gmp_optcflags_gcc="-mcpu=k6 -march=k6";;

      [i686*-*-* | pentiumpro-*-* | pentium[23]-*-* | athlon-*-*])
        # Athlon instruction costs are close to P6: 3 cycle load latency,
        # 4-6 cycle mul, 40 cycle div, pairable adc, ...
        # FIXME: Allow "-mcpu=athlon" etc here.
	GMP_GCC_MARCH_PENTIUMPRO(
          gmp_optcflags_gcc="-mcpu=pentiumpro -march=pentiumpro",
          gmp_optcflags_gcc="-mcpu=pentiumpro")
        ;;
    esac
    ;;

  # Sparc
  [ultrasparc*-*-solaris2.[7-9] | sparcv9-*-solaris2.[7-9]])
    check_64bit_compiler=yes
    gmp_cflags_gcc="$gmp_cflags_gcc -Wa,-xarch=v8plus"
    gmp_xoptcflags_gcc="-mcpu=v9 -mcpu=v8 -mv8"
    gmp_cflags64_gcc="$gmp_cflags64_gcc -m64 -mptr64 -Wa,-xarch=v9 -mcpu=v9"
    gmp_cflags_cc="-xtarget=native -xarch=v8 -xO4"
    gmp_cflags64_cc="-xtarget=native -xarch=v9 -xO4"
    ;;
  sparc64-*-linux*)
    # "sparc64" is a real misnomer for this target, since there is no support
    # for any 64-bit operations in user mode.  We assume that a future release
    # will have some 64-bit support, and therefore guess the needed compiler
    # options.
    check_64bit_compiler=yes
    gmp_cflags64_gcc="$gmp_cflags64_gcc -m64 -mptr64 -Wa,-xarch=v9 -mcpu=v9"
    gmp_cflags_gcc="$gmp_cflags_gcc -Wa,-xarch=v8plus"
    gmp_xoptcflags_gcc="-mcpu=v9 -mcpu=v8 -mv8"
    ;;
  ultrasparc*-*-* | sparcv9-*-*)
    gmp_cflags_gcc="$gmp_cflags_gcc -Wa,-xarch=v8plus"
    gmp_xoptcflags_gcc="-mcpu=v9 -mcpu=v8 -mv8"
    gmp_cflags_cc="-xtarget=native -xarch=v8 -xO4"
    ;;
  sparcv8*-*-solaris2.* | microsparc*-*-solaris2.*)
    gmp_cflags_gcc="$gmp_cflags_gcc"
    gmp_xoptcflags_gcc="-mcpu=v8 -mv8"
    gmp_cflags_cc="-xtarget=native -xarch=v8 -xO4"
    ;;
  sparcv8*-*-* | microsparc*-*-*)		# SunOS, Linux, *BSD
    cclist="gcc acc cc"
    gmp_cflags_gcc="$gmp_cflags_gcc"
    gmp_xoptcflags_gcc="-mcpu=v8 -mv8"
    gmp_cflags_acc="-g -O2 -cg92"
    gmp_cflags_cc="-O2"		# FIXME: Flag for v8?
    ;;
  supersparc*-*-solaris2.*)
    gmp_xoptcflags_gcc="-mcpu=v8 -mv8"
    gmp_cflags_cc="-xtarget=native -xarch=v8 -xO4"
    ;;
  supersparc*-*-*)		# SunOS, Linux, *BSD
    cclist="gcc acc cc"
    gmp_xoptcflags_gcc="-mcpu=v8 -mv8"
    gmp_cflags_acc="-g -O2 -cg92"
    gmp_cflags_cc="-O2"	# FIXME: Flag for v8?
    ;;
  *sparc*-*-*)
    cclist="gcc acc cc"
    gmp_cflags_acc="-g -O2"
    gmp_cflags_cc="-g -O2"
    ;;

  # POWER/PowerPC
  powerpc64*-*-aix*)
    cclist="gcc xlc"
    gmp_cflags_gcc="$gmp_cflags_gcc -maix64 -mpowerpc64"
    gmp_cflags_xlc="-g -O2 -q64 -qtune=pwr3"
    ;;
  powerpc64*-*-*)
    gmp_cflags_gcc="$gmp_cflags_gcc -mpowerpc64"
    AC_DEFINE(_LONG_LONG_LIMB)	dnl FIXME: Remove.
    ;;
  powerpc*-*-aix*)
    cclist="gcc xlc"
    gmp_cflags_gcc="$gmp_cflags_gcc -mpowerpc"
    gmp_cflags_xlc="$gmp_cflags_cc -qarch=ppc -O2"
    ;;
  powerpc*-*-*)
    gmp_cflags_gcc="$gmp_cflags_gcc -mpowerpc"
    ;;
  [power-*-aix* | power[12]-*-aix* | power2sc-*-aix*])
    cclist="gcc xlc"
    gmp_cflags_gcc="$gmp_cflags_gcc -mpower"
    gmp_cflags_xlc="$gmp_cflags_cc -qarch=pwr -O2"
    ;;

  # MIPS
  mips-sgi-irix6.*)
    check_64bit_compiler=yes
    gmp_cflags64_gcc="-g -O2 -mabi=n32 -mips3"
    gmp_cflags64_cc="$gmp_cflags64_cc -O2 -n32 -mips3"
    ;;

  # Motorola 68k family
  m88110*-*-*)
    gmp_cflags_gcc="-g -O -m88110"	dnl  FIXME: Use `-O2'?
    ;;
  m68*-*-*)
    gmp_cflags_gcc="$gmp_cflags_gcc $fomit_frame_pointer"
    ;;

  # HP
  hppa1.0*-*-*)
    cclist="gcc cc"
    gmp_cflags_cc="+O2"
    ;;
  hppa2.0w-*-*)
    cclist="cc"
    gmp_cflags_cc="+DD64 +O3"
    ;;
  hppa2.0*-*-*)
    check_64bit_compiler=yes
    cclist="gcc cc"
    gmp_cflags64_gcc="$gmp_cflags64_gcc -mWHAT -D_LONG_LONG_LIMB"
    # 2.0 code generation disabled: we need an assembler feature test checking
    # if 2.0 operations work #gmp_xoptcflags_gcc="-mpa-risc-2-0 -mpa-risc-1-1"
    gmp_xoptcflags_gcc="-mpa-risc-1-1"
    # +O2 to cc triggers bug in mpz/powm.c (cvs version 1.4)
    gmp_cflags64_cc="+DA2.0 +e +O3 -D_LONG_LONG_LIMB"
    gmp_cflags_cc="+DA1.1 +O2"		# Probably never used, 64-bit cc options should work
    ;;
  hppa*-*-*)
    cclist="gcc cc"
    gmp_cflags_gcc="$gmp_cflags_gcc -mpa-risc-1-1"
    gmp_cflags_cc="+DA1.1 +O2"
    ;;

  # VAX
  vax*-*-*)
    # FIXME: Is -fomit-frame-pointer accepted by vax gcc?
    # config/vax/vax.h has FRAME_POINTER_REQUIRED=1 always.
    gmp_cflags_gcc="$gmp_cflags_gcc $fomit_frame_pointer"
    ;;

  # Fujitsu
  [f30[01]-fujitsu-sysv*])
    cclist="gcc vcc"
    gmp_cflags_vcc="-g"		# FIXME: flags for vcc?
    ;;
esac

for tmp_cc in $cclist; do
  case "$enable_profiling" in
  prof)  eval gmp_cflags_$tmp_cc=\"\$gmp_cflags_$tmp_cc -p\" ;;
  gprof) eval gmp_cflags_$tmp_cc=\"\$gmp_cflags_$tmp_cc -pg\" ;;
  esac
done


dnl  Check for programs needed by macros for finding compiler.
dnl  More programs are checked for below, when a compiler is found.

GMP_PROG_NM


# Save CFLAGS given on command line.
gmp_user_CFLAGS="$CFLAGS"

if test -z "$CC"; then
  # Find compiler.
  GMP_PROG_CC_FIND($cclist, $check_64bit_compiler)

  # If 64-bit OS and we have a 64-bit compiler, use it.
  if test -n "$check_64bit_compiler" && test -n "$CC64"; then
    CC=$CC64
    CFLAGS=$CFLAGS64
  else
    eval CFLAGS=\$gmp_cflags_$CC  
  fi

  # Try compiler flags that may work with only some compiler versions.
  # gmp_optcflags: All or nothing.
  eval optcflags=\$gmp_optcflags_$CC
  if test -n "$optcflags"; then
    CFLAGS_save="$CFLAGS"
    CFLAGS="$CFLAGS $optcflags"
    AC_MSG_CHECKING([whether $CC accepts $optcflags])
    AC_LANG_C
    AC_TRY_COMPILER([int main(){return(0);}], optok, cross)
    if test "$optok" = "yes"; then
      AC_MSG_RESULT([yes])
    else
      AC_MSG_RESULT([no])
      CFLAGS="$CFLAGS_save"
    fi
  fi
  # gmp_xoptcflags: First is best, one has to work.
  eval xoptcflags=\$gmp_xoptcflags_$CC
  if test -n "$xoptcflags"; then
    gmp_found="no"
    for xopt in $xoptcflags; do
      CFLAGS_save="$CFLAGS"
      CFLAGS="$CFLAGS $xopt"
      AC_MSG_CHECKING([whether $CC accepts $xopt])
      AC_LANG_C
      AC_TRY_COMPILER([int main(){return(0);}], optok, cross)
      if test "$optok" = "yes"; then
        AC_MSG_RESULT([yes])
        gmp_found="yes"
        break
      else
        AC_MSG_RESULT([no])
        CFLAGS="$CFLAGS_save"
      fi
    done
    if test "$gmp_found" = "no"; then
      echo ["$0: fatal: need a compiler that understands one of $xoptcflags"]
      exit 1
    fi
  fi
fi

# Restore CFLAGS given on command line.
# FIXME: We've run through quite some unnecessary code looking for a
# nice compiler and working flags for it, just to spoil that with user
# supplied flags.
test -n "$gmp_user_CFLAGS" && CFLAGS="$gmp_user_CFLAGS"

# Select chosen compiler.
GMP_PROG_CC_SELECT

# How to assemble.
CCAS="$CC -c"
AC_SUBST(CCAS)

dnl Checks for programs.
dnl --------------------
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_CHECK_PROG(AR, ar, ar)
# ar on AIX needs to know the object file format 
case "$target" in
  powerpc64*-*-aix*)
    AR="$AR -X 64"
    ;;
esac   
dnl  FIXME: Find good ld?  /usr/ucb/ld on Solaris won't work.

dnl  FIXME: Check for FPU and set `floating_point' appropriately.

dnl  ========================================
dnl  Configuring mpn.
dnl  ----------------------------------------
dnl  Set the following target specific variables:
dnl  path		where to search for source files
dnl  family		processor family (Needed for building 
dnl 			asm-syntax.h for now.  FIXME: Remove.)
dnl  extra_functions	extra functions

family=generic

case ${target} in
  arm*-*-*)
    path="arm"
    ;;
  [sparcv9*-*-solaris2.[789]* | sparc64*-*-solaris2.[789]* | ultrasparc*-*-solaris2.[789]*])
    if test -n "$CC64"
      then path="sparc64"
      else path="sparc32/v9 sparc32/v8 sparc32"
    fi
    ;;
  sparc64-*-linux*)
    if test -n "$CC64"
      then path="sparc64"
      else path="sparc32/v9 sparc32/v8 sparc32"
    fi
    ;;
  sparcv8*-*-* | microsparc*-*-*)
	path="sparc32/v8 sparc32"
	if test x${floating_point} = xno
	  then extra_functions="udiv_nfp"
	  else extra_functions="udiv_fp"
	fi
	;;
  sparcv9*-*-* | ultrasparc*-*-*)
	path="sparc32/v9 sparc32/v8 sparc32"
	extra_functions="udiv_fp"
	;;
  supersparc*-*-*)
	path="sparc32/v8/supersparc sparc32/v8 sparc32"
	extra_functions="udiv"
	;;
  sparc*-*-*) path="sparc32"
	if test x${floating_point} = xno
	  then extra_functions="udiv_nfp"
	  else extra_functions="udiv_fp"
	fi
	;;
  hppa7000*-*-*)
    path="hppa/hppa1_1 hppa"
    extra_functions="udiv_qrnnd"
    ;;
  hppa1.0*-*-*)
    path="hppa"
    extra_functions="udiv_qrnnd"
    ;;
  hppa2.0w-*-*)
    path="pa64w"
    extra_functions="umul_ppmm udiv_qrnnd"
    ;;
  hppa2.0*-*-*)
    if test -n "$CC64"; then
      path="pa64"
      extra_functions="umul_ppmm udiv_qrnnd"
      # We need to use the system compiler, or actually the system assembler,
      # since GAS has not been ported to understand the 2.0 instructions.
      CCAS="$CC64 -c"
    else
      # FIXME: path should be "hppa/hppa2_0 hppa/hppa1_1 hppa"
      path="hppa/hppa2_0 hppa/hppa1_1/pa7100 hppa/hppa1_1 hppa"
      extra_functions="udiv_qrnnd"
    fi
    ;;
  hppa*-*-*)					#assume pa7100
    path="hppa/hppa1_1/pa7100 hppa/hppa1_1 hppa"
    extra_functions="udiv_qrnnd";;
  [f30[01]-fujitsu-sysv*])
    path=fujitsu;;
  alphaev6*-*-*) path="alpha/ev6 alpha/ev5 alpha";
		 extra_functions="invert_limb cntlz";;
  alphaev5*-*-*) path="alpha/ev5 alpha"; extra_functions="invert_limb cntlz";;
  alpha*-*-*) path="alpha"; extra_functions="invert_limb cntlz";;
  # Cray vector machines.  This must come after alpha* so that we can
  # recognize present and future vector processors with a wildcard.
  *-cray-unicos*)
    path="cray"
    extra_functions="mulww";;
  am29000*-*-*) path="a29k";;
  a29k*-*-*) path="a29k";;

  # AMD and Intel x86 configurations
  X86_PATTERN)
    gmp_m4postinc="x86/x86-defs.m4"
    extra_functions="udiv umul"
    CALLING_CONVENTIONS_OBJS="x86call.o x86check.o"

    # the CPUs below wanting to know about mmx
    case ${target} in
      [pentiummmx-*-* | pentium[23]-*-* | k6*-*-* | athlon-*-*])
	GMP_ASM_X86_MMX(tmp_mmx=yes, tmp_mmx=no)
        ;;
    esac

    # default for anything not otherwise mentioned
    path="x86"
 
    case ${target} in
      [i[34]86*-*-*])
        path="x86"
        ;;
      k5*-*-*)
        # don't know what best suits k5
        path="x86"
        ;;
      i586*-*-* | pentium-*-*)
	path="x86/pentium x86"
        ;;
      pentiummmx-*-*)
	path="x86/pentium x86"
	if test "$tmp_mmx" = yes; then
          path="x86/pentium/mmx $path"
        fi
        ;;
      i686*-*-* | pentiumpro-*-*)
	path="x86/p6 x86"
        ;;
      pentium2-*-*)
	path="x86/p6 x86"
	# The pentium/mmx lshift and rshift are good on p6 and can be used
        # until there's something specific for p6.
	if test "$tmp_mmx" = yes; then
          path="x86/p6/mmx x86/pentium/mmx $path"
        fi
        ;;
      pentium3-*-*)
	path="x86/p6 x86"
	# The pentium/mmx lshift and rshift are good on p6 and can be used
        # until there's something specific for p6.
	if test "$tmp_mmx" = yes; then
          path="x86/p6/p3mmx x86/p6/mmx x86/pentium/mmx $path"
        fi
        ;;
      [k6[23]*-*-*])
	path="x86/k6 x86"
	if test "$tmp_mmx" = yes; then
          path="x86/k6/k62mmx x86/k6/mmx $path"
        fi
        ;;
      k6*-*-*)
	path="x86/k6 x86"
	if test "$tmp_mmx" = yes; then
          path="x86/k6/mmx $path"
        fi
        ;;
      athlon-*-*)
	path="x86/k7 x86"
	if test "$tmp_mmx" = yes; then
          path="x86/k7/mmx $path"
        fi
        ;;
    esac
    ;;


  i960*-*-*) path="i960";;

  ia64*-*-*) path="ia64"; extra_functions="invert_limb";;

# Motorola 68k configurations.  Let m68k mean 68020-68040.
  [m680[234]0*-*-* | m68k*-*-* | \
  m68*-next-nextstep*])		# Nexts are at least '020
    path="m68k/mc68020 m68k"
    family=m68k
    ;;
  m68000*-*-*)
    path="m68k"
    family=m68k
    ;;

  m88k*-*-* | m88k*-*-*) path="m88k";;
  m88110*-*-*) path="m88k/mc88110 m88k";;
  ns32k*-*-*) path="ns32k";;

  pyramid-*-*) path="pyr";;

  ppc601-*-*) path="power powerpc32";;
  powerpc64*-*-*) path="powerpc64";;
  powerpc*-*-*) path="powerpc32";;
  [power-*-* | power[12]-*-* | power2sc-*-*])
    path="power"
    extra_functions="udiv_w_sdiv"
    ;;

  sh-*-*) path="sh";;
  sh2-*-*) path="sh/sh2 sh";;

  [mips[34]*-*-*]) path="mips3";;
  mips*-*-irix6*) path="mips3";;
  mips*-*-*) path="mips2";;

  vax*-*-*) path="vax"; extra_functions="udiv_w_sdiv";;

  z8000x*-*-*) path="z8000x"; extra_functions="udiv_w_sdiv";;
  z8000*-*-*) path="z8000"; extra_functions="udiv_w_sdiv";;

  clipper*-*-*) path="clipper";;
esac

AC_SUBST(CALLING_CONVENTIONS_OBJS)
if test -n "$CALLING_CONVENTIONS_OBJS"; then
  AC_DEFINE(HAVE_CALLING_CONVENTIONS,1,
  [Define if mpn/tests has calling conventions checking for the CPU])
fi


dnl Extensions for executable and object files.
dnl -------------------------------------------
AC_EXEEXT
AC_OBJEXT

dnl Use Libtool.
dnl ------------
dnl  FIXME: Shared libs seem to fail on aix4.3, forcibly disable them for now.
case "$target" in
  [*-*-aix4.[3-9]*]) enable_shared=no ;;
esac
AC_PROG_LIBTOOL

dnl Checks for libraries.
dnl ---------------------
AC_CHECK_DECLS((optarg))

dnl Checks for header files.
dnl ------------------------
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_HEADERS(getopt.h unistd.h sys/param.h sys/resource.h sys/sysctl.h sys/systemcfg.h sys/time.h sys/times.h)

dnl Checks for typedefs, structures, and compiler characteristics.
dnl --------------------------------------------------------------
AC_TYPE_SIGNAL
AC_CHECK_TYPES((void))
AC_C_STRINGIZE

dnl Checks for library functions.
dnl -----------------------------
dnl These are mainly for the benefit of supplementary programs.  The library
dnl itself doesn't use anything weird.

AC_CHECK_FUNCS(getopt_long getpagesize getrusage gettimeofday popen processor_info read_real_time srandom strtoul sysconf sysctl sysctlbyname times)
GMP_FUNC_ALLOCA

dnl Trick automake into thinking we've run AM_C_PROTOTYPES which it wants
dnl for ansi2knr, and instead use our own test.  (It's only a warning
dnl automake prints, but it's good to suppress it.)
ifelse(0,1,[
AM_C_PROTOTYPES
])
GMP_C_ANSI2KNR


dnl  Set `syntax' to one of <blank>, "mit", "elf", "aix", "macho".
syntax=
# For now, we use the old switch for setting syntax.  
# FIXME: Remove when conversion to .asm is completed.
changequote(,)dnl
case "${target}" in
  m680[234]0*-*-linuxaout* | m68k*-*-linuxaout* | \
  m68k-next-nextstep* | \
  m68000*-*-*)
    syntax=mit
    ;;
  m680[234]0*-*-linux* | m68k*-*-linux*)
    syntax=elf
    ;;
  m680[234]0*-*-* | m68k*-*-*)
    syntax=mit
    ;;
esac
changequote([,])dnl


# The pattern here tests for an absolute path the same way as
# _AC_OUTPUT_FILES in autoconf acgeneral.m4.
GMP_DEFINE_RAW(["dnl  CONFIG_TOP_SRCDIR is a path from the mpn builddir to the top srcdir"])
case "$srcdir" in
[[\\/]]* | ?:[[\\/]]* )
     GMP_DEFINE_RAW(["define(<CONFIG_TOP_SRCDIR>,<\`$srcdir'>)"])    ;;
*)   GMP_DEFINE_RAW(["define(<CONFIG_TOP_SRCDIR>,<\`../$srcdir'>)"]) ;;
esac
 
GMP_DEFINE_RAW(["include(CONFIG_TOP_SRCDIR\`/mpn/asm-defs.m4')"], POST)

# Must be after asm-defs.m4
tmp=`echo $target_cpu | sed 's/\./_/'`
GMP_DEFINE_RAW("define_not_for_expansion(\`HAVE_TARGET_CPU_$tmp')", POST)


# Set up `gmp_links'.  It's a list of link:file pairs that configure will
# process to create link -> file.
gmp_links=

# If the user specified `MPN_PATH', use that instead of the path we've
# come up with.
if test -z "$MPN_PATH"; then
  path="$path generic"
else
  path="$MPN_PATH"
fi

# Pick the correct source files in $path and link them to mpn/.
# $gmp_mpn_functions lists all functions we need.
#
# The rule is to find a file with the function name and a .asm, .S,
# .s, or .c extension.  Certain multi-function files with special names
# can provide some functions too.  (mpn/Makefile.am passes
# -DOPERATION_<func> to get them to generate the right code.)

# FIXME: udiv and umul aren't in $gmp_mpn_functions_optional yet since
# there's some versions of those files which should be checked for bit
# rot first.  Put them in $extra_functions for each target for now,
# change to standard optionals when all are ready.

# Note: The following lines defining $gmp_mpn_functions_optional
#       and $gmp_mpn_functions are parsed by the "macos/configure"
#       Perl script. So if you change the lines in a major way
#       make sure to run and examine the output from
#       
#           % (cd macos; perl configure)

gmp_mpn_functions_optional="copyi copyd com_n		\
  and_n andn_n nand_n ior_n iorn_n nior_n xor_n xnor_n"

gmp_mpn_functions="${extra_functions} inlines add_n sub_n mul_1 addmul_1   \
  submul_1 lshift rshift diveby3 divrem divrem_1 divrem_2                  \
  mod_1 mod_1_rs pre_mod_1 dump                                            \
  mul mul_fft mul_n mul_basecase sqr_basecase random                       \
  random2 sqrtrem get_str set_str scan0 scan1 popcount hamdist cmp perfsqr \
  bdivmod gcd_1 gcd gcdext tdiv_qr dc_divrem_n sb_divrem_mn jacbase        \
  $gmp_mpn_functions_optional"

# the list of all object files used by mpn/Makefile.in and the
# top-level Makefile.in, respectively
mpn_objects=
mpn_objs_in_libgmp="mpn/mp_bases.lo"

define(MPN_SUFFIXES,[asm S s c])

for tmp_ext in MPN_SUFFIXES; do
  eval found_$tmp_ext=no
done

for tmp_fn in ${gmp_mpn_functions} ; do
  for tmp_ext in MPN_SUFFIXES; do
    rm -f mpn/$tmp_fn.$tmp_ext
  done

  # functions that can be provided by multi-function files
  tmp_mulfunc=
  case $tmp_fn in
  add_n|sub_n)       tmp_mulfunc="aors_n"    ;;
  addmul_1|submul_1) tmp_mulfunc="aorsmul_1" ;;
  popcount|hamdist)  tmp_mulfunc="popham"    ;;
  and_n|andn_n|nand_n | ior_n|iorn_n|nior_n | xor_n|xnor_n)
                     tmp_mulfunc="logops_n"  ;;
  lshift|rshift)     tmp_mulfunc="lorrshift";;
  esac

  found=no
  for tmp_dir in $path; do
    for tmp_base in $tmp_fn $tmp_mulfunc; do
      for tmp_ext in MPN_SUFFIXES; do
        tmp_file=$srcdir/mpn/$tmp_dir/$tmp_base.$tmp_ext
        if test -f $tmp_file; then
          found=yes
          eval found_$tmp_ext=yes

          if test $tmp_ext = c; then
            tmp_u='$U'
          else
            tmp_u=
          fi

          mpn_objects="$mpn_objects ${tmp_fn}${tmp_u}.lo"
          mpn_objs_in_libgmp="$mpn_objs_in_libgmp mpn/${tmp_fn}${tmp_u}.lo"
          gmp_links="$gmp_links mpn/$tmp_fn.$tmp_ext:mpn/$tmp_dir/$tmp_base.$tmp_ext"

          # duplicate AC_DEFINEs are harmless, so it doesn't matter
          # that multi-function files get grepped here repeatedly
          gmp_ep=["`
            sed -n 's/^[ 	]*MULFUNC_PROLOGUE(\(.*\))/\1/p' $tmp_file ;
            sed -n 's/^[ 	]*PROLOGUE.*(\(.*\))/\1/p' $tmp_file
          `"]
          for gmp_tmp in $gmp_ep; do
            AC_DEFINE_UNQUOTED(HAVE_NATIVE_${gmp_tmp})
          done

          case $tmp_fn in
          sqr_basecase) sqr_basecase_source=$tmp_file ;;
          esac

          break
        fi
      done
      if test $found = yes; then break ; fi
    done
    if test $found = yes; then break ; fi
  done

  if test $found = no; then
    for tmp_optional in $gmp_mpn_functions_optional; do
      if test $tmp_optional = $tmp_fn; then
        found=yes
      fi
    done
    if test $found = no; then
      AC_MSG_ERROR([no version of $tmp_fn found in path: $path])
    fi
  fi
done

SPEED_CYCLECOUNTER_OBJ=
cyclecounter_size=2
case ${target} in
  X86_PATTERN)
    # Availability of rdtsc is checked at run-time.
    SPEED_CYCLECOUNTER_OBJ=pentium.lo ;;
  alpha*-*-*)
    SPEED_CYCLECOUNTER_OBJ=alpha.lo
    cyclecounter_size=1 ;;
  sparcv9*-*-* | ultrasparc*-*-* | sparc64*-*-*)
    SPEED_CYCLECOUNTER_OBJ=sparcv9.lo ;;
  hppa2*-*-*)
    if test -n "$CC64"; then
      SPEED_CYCLECOUNTER_OBJ=hppa2.lo
    else
      SPEED_CYCLECOUNTER_OBJ=hppa.lo
    fi;;
  hppa*-*-*)
    SPEED_CYCLECOUNTER_OBJ=hppa.lo ;;
  ia64*-*-*)
    SPEED_CYCLECOUNTER_OBJ=ia64.lo ;;
esac
AC_SUBST(SPEED_CYCLECOUNTER_OBJ)
if test -n "$SPEED_CYCLECOUNTER_OBJ"
then
  AC_DEFINE_UNQUOTED(HAVE_SPEED_CYCLECOUNTER, $cyclecounter_size,
  [Tune directory speed_cyclecounter, undef=none, 1=32bits, 2=64bits)])

  # All cycle counters are .asm files currently
  found_asm=yes
fi

# Don't demand an m4 unless it's actually needed.
if test $found_asm = yes; then
  GMP_PROG_M4
else
  M4=m4-not-needed
  AC_SUBST(M4)
fi

# Only do the ASM checks if there's a .S or .asm wanting them.
if test $found_asm = no && test $found_S = no; then
  gmp_no_asm_syntax_testing=yes
fi

if test "$gmp_no_asm_syntax_testing" != yes; then
  GMP_ASM_TEXT
  GMP_ASM_DATA
  GMP_ASM_RODATA
  GMP_ASM_GLOBL
  GMP_ASM_LABEL_SUFFIX
  GMP_ASM_TYPE
  GMP_ASM_SIZE
  GMP_ASM_LSYM_PREFIX
  GMP_ASM_W32
  GMP_ASM_UNDERSCORE(underscore=yes, underscore=no)
  GMP_ASM_ALIGN_LOG(asm_align=log, asm_align=nolog)

  case $target in
    powerpc*-*-*)
      GMP_ASM_POWERPC_R_REGISTERS
      gmp_m4postinc="powerpc32/powerpc-defs.m4"

      case "$target" in
      powerpc64-*-aix*)
        gmp_m4postinc="$gmp_m4postinc powerpc64/aix.m4"
        ;;
      *-*-aix*)
        gmp_m4postinc="$gmp_m4postinc powerpc32/aix.m4"
        ;;
      esac
      ;;

    X86_PATTERN)
      GMP_ASM_ALIGN_FILL_0x90
      GMP_ASM_X86_SHLDL_CL
      if test "$enable_profiling" != no; then
        GMP_ASM_X86_MCOUNT
      fi
      ;;
  esac

  # Build an asm-syntax.h file for targets that include that from the
  # assembly files.
  # FIXME: Remove when conversion to .asm is completed.
  case "${family}-${underscore}-${asm_align}-${syntax}" in
    m68k-yes-log-mit)
      echo '#define MIT_SYNTAX' >asm-syntax.h
      cat $srcdir/mpn/underscore.h >>asm-syntax.h
      echo '#include "'$srcdir'/mpn/m68k/syntax.h"' >>asm-syntax.h;;
    m68k-no-nolog-elf)
      echo '#define ELF_SYNTAX' >asm-syntax.h
      echo '#define C_SYMBOL_NAME(name) name' >>asm-syntax.h
      echo '#include "'$srcdir'/mpn/m68k/syntax.h"' >>asm-syntax.h;;
  esac
fi


dnl  config.m4 post-includes
dnl  -----------------------
changequote(,)dnl
case "$target" in
  alpha*-cray-unicos*)
    gmp_m4postinc="alpha/unicos.m4"
    ;;
  alpha*-*-*)
    gmp_m4postinc="alpha/default.m4"
    ;;
  ia64*-*-*)
    gmp_m4postinc="ia64/default.m4"
    ;;
esac
changequote([, ])dnl

for tmp_f in $gmp_m4postinc; do
  GMP_DEFINE_RAW(["include_mpn(\`$tmp_f')"], POST)
done


# Create link for gmp-mparam.h.
gmp_mparam_source=
for tmp_dir in $path ; do
  rm -f gmp-mparam.h
  tmp_file=$srcdir/mpn/$tmp_dir/gmp-mparam.h
  if test -f $tmp_file; then
    gmp_links="$gmp_links gmp-mparam.h:mpn/$tmp_dir/gmp-mparam.h"
    gmp_mparam_source=$tmp_file
    break
  fi
done
if test -z "$gmp_mparam_source"; then
  AC_MSG_ERROR([no version of gmp-mparam.h found in path: $path])
fi

# Copy any KARATSUBA_SQR_THRESHOLD from gmp-mparam.h to config.m4.
# Some versions of sqr_basecase.asm use this.
tmp_gmp_karatsuba_sqr_threshold="`sed -n 's/^#define KARATSUBA_SQR_THRESHOLD[ 	]*\([0-9][0-9]*\).*$/\1/p' $gmp_mparam_source`"
if test -n "$tmp_gmp_karatsuba_sqr_threshold"; then
  GMP_DEFINE_RAW(["define(<KARATSUBA_SQR_THRESHOLD>,<$tmp_gmp_karatsuba_sqr_threshold>)"])
fi

GMP_C_SIZES


# Dig out the links from `gmp_links' for inclusion in DISTCLEANFILES.
gmp_srclinks=
for f in $gmp_links; do
  gmp_srclinks="$gmp_srclinks `echo $f | sed 's/\(.*\):.*/\1/'`"
done

AC_SUBST(mpn_objects)
AC_SUBST(mpn_objs_in_libgmp)
AC_SUBST(gmp_srclinks)


# A recompiled sqr_basecase for use in the tune program, if necessary.
TUNE_SQR_OBJ=
case $sqr_basecase_source in *.asm)
  sqr_max=[`sed -n 's/^def...(KARATSUBA_SQR_THRESHOLD_MAX, *\([0-9]*\))/\1/p' $sqr_basecase_source`]
  if test -n "$sqr_max"; then
    TUNE_SQR_OBJ=sqr_asm.lo
    AC_DEFINE_UNQUOTED(TUNE_KARATSUBA_SQR_MAX,$sqr_max,
    [Maximum size the tune program can test for KARATSUBA_SQR_THRESHOLD])
  fi ;;
*.c)
  TUNE_SQR_OBJ=sqr_basecase$U.lo
  AC_DEFINE(TUNE_KARATSUBA_SQR_MAX,KARATSUBA_SQR_MAX_GENERIC)
  ;;
esac
AC_SUBST(TUNE_SQR_OBJ)


dnl  ----------------------------------------
dnl  Make links.
AC_CONFIG_LINKS($gmp_links)

dnl  Create config.m4.
GMP_FINISH

dnl  Create Makefiles
dnl  FIXME: Upcoming version of autoconf/automake may not like broken lines.
AC_OUTPUT(Makefile mpf/Makefile mpz/Makefile mpn/Makefile mpq/Makefile \
  mpf/tests/Makefile mpz/tests/Makefile mpq/tests/Makefile mpn/tests/Makefile \
  tests/Makefile tests/rand/Makefile demos/Makefile tune/Makefile \
  mpbsd/Makefile mpbsd/tests/Makefile mpfr/Makefile mpfr/tests/Makefile)
