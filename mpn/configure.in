# This file is a shell script fragment that supplies the information
# necessary for a configure script to process the program in
# this directory.  For more information, look at ../configure.

configdirs=
srctrigger=powerpc32
srcname="GNU Multi-Precision library/mpn"

# per-host:

# per-target:

family=
underscore=no
asm_align=nolog
syntax=

case "${target}" in
  arm*-*-*)
	path="arm";;
  sparc9*-*-solaris2.[789]* | sparc64*-*-solaris2.[789]* | ultrasparc*-*-solaris2.[789]*)
	path="sparc64"
	family=sparc;;
  sparc8*-*-* | microsparc*-*-*)
	path="sparc32/v8 sparc32"
	if [ x$floating_point = xno ]
	  then extra_functions="udiv_nfp"
	  else extra_functions="udiv_fp"
	fi
	family=sparc;;
  sparc9*-*-* | ultrasparc*-*-*)
	path="sparc32/v9 sparc32/v8 sparc32"
	extra_functions="udiv_fp"
	family=sparc;;
  supersparc*-*-*)
	path="sparc32/v8/supersparc sparc32/v8 sparc32"
	extra_functions="udiv"
	family=sparc;;
  sparc*-*-*) path="sparc32"
	if [ x$floating_point = xno ]
	  then extra_functions="udiv_nfp"
	  else extra_functions="udiv_fp"
	fi
	family=sparc;;
  hppa7000*-*-*) path="hppa/hppa1_1 hppa"
		 extra_functions="udiv_qrnnd";;
  hppa1.0*-*-*) path="hppa"
		extra_functions="udiv_qrnnd";;
  hppa2.0*-*-*) path="pa64"
		target_makefile_frag=config/mt-pa2hpux
		extra_functions="umul_ppmm udiv_qrnnd";;
  hppa*-*-*)					# assume pa7100
    path="hppa/hppa1_1/pa7100 hppa/hppa1_1 hppa"
    extra_functions="udiv_qrnnd";;
  cray2-cray-unicos* | [xy]mp-cray-unicos* | [ctj]90-cray-unicos*)
    path="cray";;
  f30[01]-fujitsu-sysv*)
    path=fujitsu;;
  alphaev5*-*-*) path="alpha/ev5 alpha"; extra_functions="invert-limb cntlz";;
  alpha*-*-*) path="alpha"; extra_functions="invert-limb cntlz";;
  am29000*-*-*) path="am29000";;
  a29k*-*-*) path="am29000";;

# Intel x86 configurations
  i[34]86*-*-*)
	path="x86"
	family=x86;;
  i586*-*-* | pentium-*-*)
	path="x86/pentium x86"
	family=x86;;
  i686*-*-* | pentiumpro-*-*)
	path="x86/p6 x86"
	family=x86;;

# Motorola 68k configurations.  Let m68k mean 68020-68040.
  m680[234]0*-*-* | m68k*-*-* | \
  m68*-next-nextstep*)		# Nexts are at least '020
	path="m68k/mc68020 m68k"
	family=m68k;;
  m68000*-*-*)
	path="m68k"
	family=m68k;;

  i960*-*-*) path="i960";;
  m88k*-*-* | m88k*-*-*) path="m88k";;
  m88110*-*-*) path="m88k/mc88110 m88k";;
  ns32k*-*-*) path="n32k";;

  ppc601-*-*)
    path="power powerpc32"
    family=ppc;;
  ppc620-*-* | powerpc64*-*-*)
    path="powerpc64"
    family=ppc;;
  ppc60[234]*-*-* | powerpc*-*-*)
    path="powerpc32"
    family=ppc;;

  pyramid-*-*) path="pyr";;
  rs6000-*-* | power-*-* | power2-*-*)
    path="power"; extra_functions="udiv_w_sdiv";;
  sh-*-*) path="sh";;
  sh2-*-*) path="sh/sh2 sh";;
  mips[34]*-*-*) path="mips3";;
  mips*-*-irix6*) path="mips3";;
  mips*-*-*) path="mips2";;
  vax*-*-*) path="vax"; extra_functions="udiv_w_sdiv";;
  z8000x*-*-*) path="z8000x"; extra_functions="udiv_w_sdiv";;
  z8000*-*-*) path="z8000"; extra_functions="udiv_w_sdiv";;
  clipper*-*-*) path="clipper";;
  *-*-*);;
esac


# Determine stuff like whether globals are prefixed by `_', how the
# align directive works, and if a makefile fragment is needed.
case "${target}" in
  *-*-freebsd[34]*)	# hides generic *bsd* alternative
    underscore=no; asm_align=nolog;;
  i[3456]86*-*-*bsd* | pentium*-*-*bsd* | \
  i[3456]86*-*-linuxaout* | pentium*-*-linuxaout* | \
  i[3456]86*-*-linuxoldld* | pentium*-*-linuxoldld* | \
  i[3456]86*-*-nextstep* | i[3456]86*-*-nextstep*)
    target_makefile_frag=config/t-oldgas
    underscore=yes; asm_align=log;;
  m680[234]0*-*-linuxaout* | m68k*-*-linuxaout* | \
  m68k-next-nextstep* | \
  m68000*-*-* | \
  m680[234]0*-*-* | m68k*-*-*)
    underscore=yes
    asm_align=log
    syntax=mit;;
  m680[234]0*-*-linux* | m68k*-*-linux*)
    underscore=no
    asm_align=nolog
    syntax=elf;;
  *-*-sunos*)
    underscore=yes; asm_align=log;;
  rs6000-*-aix[456789]* | rs6000-*-aix3.2.[456789])
    target_makefile_frag=config/t-pwr-aix;;
  ppc601-*-aix[456789]* | ppc601-*-aix3.2.[456789] | \
  ppc60[234]*-*-aix[456789]* | ppc60[234]*-*-aix3.2.[456789] | \
  powerpc*-*-aix[456789]* | powerpc*-*-aix3.2.[456789])
    target_makefile_frag=config/t-ppc-aix
    syntax=aix;;
  ppc601-*-* | \
  ppc60[234]*-* | ppc60[234]*-*-* | \
  powerpc*-*-* | powerpc*-*-*)
    syntax=elf;;
  sparc9-*-solaris2*)
    target_makefile_frag=config/mt-sprc9;;
esac


# Now build an asm-syntax.h file for targets that include that from the
# assembly files.
case "${family}-${underscore}-${asm_align}-${syntax}" in
  x86-yes-log-*)
    echo '#define BSD_SYNTAX' >asm-syntax.h
    cat $srcdir/underscore.h >>asm-syntax.h
    echo '#include "'$srcdir'/x86/syntax.h"' >>asm-syntax.h;;
  x86-no-nolog-*)
    echo '#define ELF_SYNTAX' >asm-syntax.h
    echo '#define C_SYMBOL_NAME(name) name' >>asm-syntax.h
    echo '#include "'$srcdir'/x86/syntax.h"' >>asm-syntax.h;;
  m68k-yes-log-mit)
    echo '#define MIT_SYNTAX' >asm-syntax.h
    cat $srcdir/underscore.h >>asm-syntax.h
    echo '#include "'$srcdir'/m68k/syntax.h"' >>asm-syntax.h;;
  m68k-no-nolog-elf)
    echo '#define ELF_SYNTAX' >asm-syntax.h
    echo '#define C_SYMBOL_NAME(name) name' >>asm-syntax.h
    echo '#include "'$srcdir'/m68k/syntax.h"' >>asm-syntax.h;;
  ppc-*-*-aix)
    echo '#define AIX_SYNTAX' >asm-syntax.h;;
  ppc-*-*-elf)
    echo '#undef AIX_SYNTAX' >asm-syntax.h;;
  sparc-yes-log-*)
    cat $srcdir/underscore.h >asm-syntax.h;;
  sparc)
    echo '#define C_SYMBOL_NAME(name) name' >asm-syntax.h;;
esac


functions="${extra_functions} inlines add_n sub_n mul_1 addmul_1 submul_1 \
 lshift rshift divmod_1 divrem divrem_1 divrem_newt mod_1 pre_mod_1 \
 dump mul mul_n mul_basecase sqr_basecase random random2 rawrandom \
 sqrtrem get_str set_str scan0 scan1 popcount hamdist cmp \
 perfsqr bdivmod gcd_1 gcd gcdext"

path="$path generic"
mpn_objects=

for fn in $functions ; do
  mpn_objects="$mpn_objects $fn.o"
  for dir in $path ; do
    rm -f $fn.[Ssc]
    if test -f $srcdir/$dir/$fn.S ; then
      files="$files $dir/$fn.S"
      links="$links $fn.S"
      break
    elif test -f $srcdir/$dir/$fn.s ; then
      files="$files $dir/$fn.s"
      links="$links $fn.s"
      break
    elif test -f $srcdir/$dir/$fn.c ; then
      files="$files $dir/$fn.c"
      links="$links $fn.c"
      break
    fi
  done
done

for dir in $path ; do
  rm -f gmp-mparam.h
  if test -f $srcdir/$dir/gmp-mparam.h ; then
    files="$files $dir/gmp-mparam.h"
    links="$links gmp-mparam.h"
    break
  fi
done

mpn_links=$links

# post-target:

sed <Makefile >Makefile.tmp \
  -e "s/MPN_LINKS = .*/MPN_LINKS =${mpn_links}/" \
  -e "s/MPN_OBJECTS = .*/MPN_OBJECTS =${mpn_objects}/"

mv Makefile.tmp Makefile
